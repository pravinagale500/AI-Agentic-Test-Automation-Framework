{"version":3,"file":"rerunHandler.js","sourceRoot":"","sources":["../../../src/utils/rerunHandler.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEzC,OAAO,IAAI,MAAM,MAAM,CAAC;AASxB;;;;;;;GAOG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,MAAc,EACd,GAAW,EACX,QAAQ,GAAG,CAAC,EACZ,UAAsB,EAAE;IAExB,MAAM,EACJ,QAAQ,GAAG,MAAM,EACjB,OAAO,GAAG,KAAK,EACf,OAAO,GAAG,CAAC,EACX,OAAO,GAAG,CAAC,EACZ,GAAG,OAAO,CAAC;IAEZ,MAAM,WAAW,GAAoB;QACnC,KAAK,EAAE,SAAS;QAChB,OAAO;QACP,WAAW,EAAE,IAAI;QACjB,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC,GAAG,EAAE,WAAW,EAAE,GAAG,EAAE;KAC1C,CAAC;IAEF,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC;QACnC,IAAI,CAAC;YACH,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,OAAO,QAAQ,YAAY,GAAG,EAAE,CAAC,CAAC;YAE/D,MAAM,YAAY,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAChC,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,EAAE,GAAG,GAAG,UAAU,CAAC,CAAC;YAEvE,MAAM,OAAO,GAAG;gBACd,qBAAqB;gBACrB,QAAQ;gBACR,cAAc,QAAQ,EAAE;gBACxB,aAAa,OAAO,EAAE;gBACtB,aAAa,OAAO,EAAE;aACvB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAEZ,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAC/B,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YAC7B,OAAO;QACT,CAAC;QAAC,OAAO,GAAG,EAAE,CAAC;YACb,MAAM,YAAY,GAAG,GAAG,YAAY,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;YACtE,OAAO,CAAC,KAAK,CAAC,cAAc,CAAC,UAAU,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;YAErE,IAAI,CAAC,KAAK,QAAQ,EAAE,CAAC;gBACnB,OAAO,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;gBACzC,MAAM,IAAI,KAAK,CAAC,qBAAqB,QAAQ,cAAc,YAAY,EAAE,CAAC,CAAC;YAC7E,CAAC;YAED,OAAO,CAAC,GAAG,CAAC,sCAAsC,CAAC,CAAC;QACtD,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["import { generateTest } from \"../agents/testGenerator.js\";\nimport { execSync } from \"child_process\";\nimport type { ExecSyncOptions } from \"child_process\";\nimport path from \"path\";\n\ninterface RunOptions {\n  reporter?: string;\n  timeout?: number;\n  workers?: number;\n  retries?: number;\n}\n\n/**\n * Runs a test with automatic retries on failure\n * @param prompt - The test prompt to generate the test from\n * @param tag - The tag to identify the test\n * @param attempts - Number of retry attempts (default: 2)\n * @param options - Additional test run options\n * @returns Promise that resolves when the test passes or rejects after all attempts fail\n */\nexport async function runWithRetries(\n  prompt: string, \n  tag: string, \n  attempts = 2,\n  options: RunOptions = {}\n): Promise<void> {\n  const {\n    reporter = \"list\",\n    timeout = 30000,\n    workers = 1,\n    retries = 0\n  } = options;\n\n  const execOptions: ExecSyncOptions = {\n    stdio: \"inherit\",\n    timeout,\n    windowsHide: true,\n    env: { ...process.env, FORCE_COLOR: \"1\" }\n  };\n\n  for (let i = 1; i <= attempts; i++) {\n    try {\n      console.log(`\\n🧪 Attempt ${i} of ${attempts} for tag=${tag}`);\n      \n      await generateTest(prompt, tag);\n      const testPath = path.resolve(__dirname, \"../tests\", `${tag}.spec.ts`);\n      \n      const command = [\n        \"npx playwright test\",\n        testPath,\n        `--reporter=${reporter}`,\n        `--workers=${workers}`,\n        `--retries=${retries}`,\n      ].join(\" \");\n\n      execSync(command, execOptions);\n      console.log(\"✅ Test passed\");\n      return;\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : String(err);\n      console.error(`⚠️ Attempt ${i} failed:`, errorMessage.slice(0, 300));\n      \n      if (i === attempts) {\n        console.error(\"🚨 All attempts failed.\");\n        throw new Error(`Test failed after ${attempts} attempts: ${errorMessage}`);\n      }\n      \n      console.log(\"🔁 Regenerating test and retrying...\");\n    }\n  }\n}\n"]}
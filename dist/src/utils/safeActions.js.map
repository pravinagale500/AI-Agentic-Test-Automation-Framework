{"version":3,"file":"safeActions.js","sourceRoot":"","sources":["../../../src/utils/safeActions.ts"],"names":[],"mappings":"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","sourcesContent":["import { type Page, type Locator, expect, type Response } from \"@playwright/test\";\nimport { createLogger, format, transports } from \"winston\";\n\n/**\n * Configuration options for safe actions\n */\nexport interface SafeActionOptions {\n  /** Number of retry attempts (default: 3) */\n  retries?: number;\n  /** Timeout in milliseconds for each attempt (default: 5000) */\n  timeout?: number;\n  /** Delay between retries in milliseconds (default: 500) */\n  delay?: number;\n  /** Whether to force the action (skip checks) */\n  force?: boolean;\n  /** Whether to scroll element into view */\n  scroll?: boolean;\n  /** Whether to log retry attempts (default: false) */\n  verbose?: boolean;\n  /** Custom error handler */\n  onError?: (error: Error, attempt: number) => void | Promise<void>;\n}\n\n/**\n * Result of a safe action execution\n */\ninterface ActionResult<T> {\n  /** Whether the action succeeded */\n  success: boolean;\n  /** The result value if any */\n  value?: T;\n  /** Error if failed */\n  error?: Error;\n  /** Number of attempts made */\n  attempts: number;\n  /** Total duration in ms */\n  duration: number;\n}\n\n/**\n * Custom error class for safe action failures\n */\nexport class SafeActionError extends Error {\n  constructor(\n    message: string,\n    public readonly selector?: string,\n    public readonly attempt?: number,\n    public override readonly cause?: Error\n  ) {\n    super(message);\n    this.name = 'SafeActionError';\n    // Preserve stack trace\n    Error.captureStackTrace(this, SafeActionError);\n  }\n}\n\n// Configure logger\nconst logger = createLogger({\n  format: format.combine(\n    format.timestamp(),\n    format.colorize(),\n    format.printf(({ timestamp, level, message }) => {\n      return `${timestamp} [${level}]: ${message}`;\n    })\n  ),\n  transports: [\n    new transports.Console(),\n    new transports.File({ filename: 'error.log', level: 'error' }),\n    new transports.File({ filename: 'actions.log' })\n  ]\n});\n\nconst DEFAULT_OPTIONS: Required<SafeActionOptions> = {\n  retries: 3,\n  timeout: 5000,\n  delay: 500,\n  force: false,\n  scroll: true,\n  verbose: false,\n  onError: null as unknown as (error: Error, attempt: number) => void\n} as const;\n\n/**\n * Safely retry an async function with configurable options\n * @param action The async function to retry\n * @param options Configuration options\n * @returns Result of the action\n */\nasync function withRetry<T>(\n  action: () => Promise<T>,\n  options: Required<SafeActionOptions>,\n  actionName: string,\n  target?: string\n): Promise<ActionResult<T>> {\n  const startTime = Date.now();\n  let attempts = 0;\n\n  for (let i = 0; i < options.retries; i++) {\n    attempts++;\n    try {\n      if (options.verbose) {\n        logger.info(`${actionName} attempt ${attempts}/${options.retries}`, { target });\n      }\n\n      const value = await action();\n      const duration = Date.now() - startTime;\n\n      logger.debug(`${actionName} succeeded`, {\n        target,\n        attempts,\n        duration\n      });\n\n      return { success: true, value, attempts, duration };\n    } catch (error) {\n      const isLastAttempt = i === options.retries - 1;\n      const errorMessage = error instanceof Error ? error.message : String(error);\n\n      logger.warn(`${actionName} attempt ${attempts} failed: ${errorMessage}`, {\n        target,\n        attempts,\n        isLastAttempt\n      });\n\n      if (options.onError) {\n        await options.onError(\n          error instanceof Error ? error : new Error(String(error)),\n          attempts\n        );\n      }\n\n      if (isLastAttempt) {\n        const duration = Date.now() - startTime;\n        const finalError = new SafeActionError(\n          `${actionName} failed after ${attempts} attempts: ${errorMessage}`,\n          target,\n          attempts,\n          error instanceof Error ? error : undefined\n        );\n\n        logger.error(`${actionName} failed permanently`, {\n          target,\n          attempts,\n          duration,\n          error: finalError\n        });\n\n        return { \n          success: false,\n          error: finalError,\n          attempts,\n          duration\n        };\n      }\n\n      await new Promise(resolve => setTimeout(resolve, options.delay * Math.pow(2, i)));\n    }\n  }\n\n  // This should never happen due to the loop structure\n  throw new Error('Unexpected retry loop exit');\n}\n\n/**\n * Safely clicks an element with retry capability\n * @param page Playwright Page object\n * @param selector Element selector\n * @param options Configuration options\n * @returns Action result\n */\nexport async function clickSafe(\n  page: Page,\n  selector: string,\n  options: SafeActionOptions = {}\n): Promise<ActionResult<void>> {\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n\n  return withRetry(\n    async () => {\n      const element = page.locator(selector);\n      \n      // Verify element state before clicking\n      if (!opts.force) {\n        await expect(element).toBeVisible({ timeout: opts.timeout });\n        await expect(element).toBeEnabled({ timeout: opts.timeout });\n      }\n\n      if (opts.scroll) {\n        await element.scrollIntoViewIfNeeded();\n      }\n\n      await element.click({\n        timeout: opts.timeout,\n        force: opts.force\n      });\n    },\n    opts,\n    'Click',\n    selector\n  );\n}\n\n/**\n * Safely fills a form field with retry capability\n * @param page Playwright Page object\n * @param selector Element selector\n * @param text Text to fill\n * @param options Configuration options\n * @returns Action result\n */\nexport async function fillSafe(\n  page: Page,\n  selector: string,\n  text: string,\n  options: SafeActionOptions = {}\n): Promise<ActionResult<void>> {\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n\n  return withRetry(\n    async () => {\n      const element = page.locator(selector);\n      \n      // Verify element state before filling\n      if (!opts.force) {\n        await expect(element).toBeVisible({ timeout: opts.timeout });\n        await expect(element).toBeEnabled({ timeout: opts.timeout });\n      }\n\n      if (opts.scroll) {\n        await element.scrollIntoViewIfNeeded();\n      }\n\n      await element.fill(text, { timeout: opts.timeout });\n\n      // Verify the text was entered correctly\n      const actualText = await element.inputValue();\n      if (actualText !== text) {\n        throw new SafeActionError(\n          `Text verification failed. Expected: \"${text}\", Got: \"${actualText}\"`,\n          selector\n        );\n      }\n    },\n    opts,\n    'Fill',\n    selector\n  );\n}\n\n/**\n * Safely expects an element condition with retry capability\n * @param locator Playwright Locator object\n * @param assertion The assertion function to run\n * @param options Configuration options\n * @returns Action result\n */\nexport async function expectSafe<T>(\n  locator: Locator,\n  assertion: (element: Locator) => Promise<T>,\n  options: SafeActionOptions = {}\n): Promise<ActionResult<T>> {\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n\n  return withRetry(\n    async () => {\n      if (opts.scroll) {\n        await locator.scrollIntoViewIfNeeded();\n      }\n      return assertion(locator);\n    },\n    opts,\n    'Expect',\n    locator.toString()\n  );\n}\n\n/**\n * Safely waits for a network request with retry capability\n * @param page Playwright Page object\n * @param urlPattern URL pattern to wait for\n * @param options Configuration options\n * @returns Action result with the response\n */\nexport async function waitForRequestSafe(\n  page: Page,\n  urlPattern: string | RegExp,\n  options: SafeActionOptions = {}\n): Promise<ActionResult<Response>> {\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n\n  return withRetry(\n    async () => page.waitForResponse(urlPattern, { timeout: opts.timeout }),\n    opts,\n    'WaitForRequest',\n    urlPattern.toString()\n  );\n}\n\n/**\n * Safely executes a custom action with retry capability\n * @param action The async action to perform\n * @param options Configuration options\n * @returns Action result\n */\nexport async function executeSafe<T>(\n  action: () => Promise<T>,\n  options: SafeActionOptions = {}\n): Promise<ActionResult<T>> {\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n  return withRetry(action, opts, 'CustomAction');\n}\n\n/**\n * Checks if an error is a SafeActionError\n */\nexport function isSafeActionError(error: unknown): error is SafeActionError {\n  return error instanceof SafeActionError;\n}\n"]}
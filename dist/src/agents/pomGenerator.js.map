{"version":3,"file":"pomGenerator.js","sourceRoot":"","sources":["../../../src/agents/pomGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import fs from \"fs\";\nimport path from \"path\";\nimport { OpenAI } from \"openai\";\n\n/**\n * Custom error class for POM generation failures\n */\nexport class POMGenerationError extends Error {\n  constructor(message: string, public readonly details?: unknown) {\n    super(message);\n    this.name = \"POMGenerationError\";\n  }\n}\n\n/**\n * Represents a generated Page Object Model\n */\nexport interface GeneratedPOM {\n  /** The name of the generated class */\n  className: string;\n  /** The TypeScript code content */\n  content: string;\n  /** The absolute file path where the POM will be saved */\n  filePath: string;\n  /** Any validation warnings */\n  warnings?: string[];\n}\n\nconst SYSTEM_PROMPT_POM = `\nYou are an expert Playwright automation engineer specializing in Page Object Models.\nGenerate TypeScript Playwright Page Object Model classes for the given scenario.\nRequirements:\n- Each class must extend Playwright's Page class\n- Use semantic selectors: getByRole(), getByLabel(), getByPlaceholder(), getByTestId()\n- Create methods for each major page interaction\n- Add proper TypeScript types and return values\n- Include error handling with try/catch\n- Add JSDoc documentation for public methods\n- Include proper constructor initialization\n- Use proper async/await patterns\n- Avoid hardcoding values, use parameters instead\n- Follow naming conventions: camelCase for methods, PascalCase for classes\n- Keep methods focused and single-responsibility\n- Include logging for important actions\nOutput ONLY TypeScript code without any additional commentary.\n`;\n\nconst DEFAULTS = {\n  model: \"gpt-4\",\n  outputDir: path.join(process.cwd(), \"src\", \"pom\"),\n  temperature: 0.7\n} as const;\n\n/**\n * POMGenerator class for creating Page Object Model files\n */\nexport class POMGenerator {\n  private readonly openai: OpenAI;\n\n  /**\n   * Creates a new POMGenerator instance\n   * @param apiKey OpenAI API key\n   * @param options Optional configuration options\n   */\n  constructor(\n    apiKey: string,\n    private readonly options: {\n      /** Output directory for generated POMs (default: src/pom) */\n      outputDir?: string;\n      /** Model to use for generation (default: gpt-4) */\n      model?: string;\n      /** Temperature for generation (default: 0.7) */\n      temperature?: number;\n    } = {}\n  ) {\n    if (!apiKey) {\n      throw new POMGenerationError(\"OpenAI API key is required\");\n    }\n    this.openai = new OpenAI({ apiKey });\n  }\n\n  /**\n   * Generates Page Object Model classes from a given prompt\n   * @param prompt The scenario description to generate POMs for\n   * @returns Array of generated POM details\n   */\n  /**\n   * Generates Page Object Model classes from a given prompt\n   * @param prompt The scenario description or requirements for the page objects\n   * @throws {POMGenerationError} If generation, validation, or file operations fail\n   * @returns Promise resolving to array of generated POM details\n   */\n  async generatePOMs(prompt: string): Promise<GeneratedPOM[]> {\n    if (!prompt?.trim()) {\n      throw new POMGenerationError(\"Prompt cannot be empty\");\n    }\n\n    try {\n      const code = await this.getGeneratedCode(prompt);\n      const poms = this.parseGeneratedCode(code);\n      return await this.writePOMFiles(poms);\n    } catch (error) {\n      if (error instanceof POMGenerationError) {\n        throw error;\n      }\n      throw new POMGenerationError(\"Failed to generate POMs\", error);\n    }\n  }\n\n  /**\n   * Generates code using OpenAI API\n   * @param prompt The user prompt to generate code from\n   * @throws {POMGenerationError} If API call fails or returns invalid response\n   * @returns Promise resolving to generated code\n   */\n  private async getGeneratedCode(prompt: string): Promise<string> {\n    try {\n      const response = await this.openai.chat.completions.create({\n        model: this.options.model || DEFAULTS.model,\n        messages: [\n          { role: \"system\", content: SYSTEM_PROMPT_POM },\n          { role: \"user\", content: prompt }\n        ],\n        max_tokens: 2000,\n        temperature: this.options.temperature || DEFAULTS.temperature,\n        presence_penalty: 0.1, // Encourage some variation\n        frequency_penalty: 0.1, // Discourage repetition\n      });\n\n      const code = response.choices[0]?.message?.content;\n      if (!code?.trim()) {\n        throw new POMGenerationError(\"No code generated from OpenAI\");\n      }\n\n      return code;\n    } catch (error) {\n      throw new POMGenerationError(\n        \"OpenAI API error\",\n        error instanceof Error ? error.message : String(error)\n      );\n    }\n  }\n\n  private parseGeneratedCode(code: string): GeneratedPOM[] {\n    // Use regex to properly match class definitions\n    const classRegex = /export\\s+class\\s+(\\w+)(?:\\s+extends\\s+\\w+)?\\s*{[\\s\\S]*?(?=export\\s+class|$)/g;\n    const matches = Array.from(code.matchAll(classRegex));\n\n    if (matches.length === 0) {\n      throw new POMGenerationError(\"No valid Page Object classes found in generated code\");\n    }\n\n    return matches.map(match => {\n      const content = match[0].trim();\n      const className = match[1];\n\n      if (!className) {\n        throw new POMGenerationError(\"Failed to extract class name from generated code\");\n      }\n\n      // Validate class name\n      if (!/^[A-Z][a-zA-Z0-9]*$/.test(className)) {\n        throw new POMGenerationError(`Invalid class name: ${className}`);\n      }\n\n      const outputDir = this.options.outputDir || DEFAULTS.outputDir;\n      const filePath = path.join(outputDir, `${className}.ts`);\n      const warnings: string[] = [];\n\n      // Validate class content\n      const validationWarnings = this.validateClassContent(content);\n      if (validationWarnings.length > 0) {\n        warnings.push(...validationWarnings);\n      }\n\n      return { className, content, filePath, warnings: warnings.length > 0 ? warnings : undefined };\n    });\n  }\n\n  /**\n   * Validates the content of a generated class\n   * @param content The class content to validate\n   * @returns Array of warning messages\n   */\n  private validateClassContent(content: string): string[] {\n    const warnings: string[] = [];\n\n    // Structure validation\n    if (!content.trim().startsWith(\"export class\")) {\n      warnings.push(\"Class definition does not start with 'export class'\");\n    }\n    if (!content.includes(\"extends Page\")) {\n      warnings.push(\"Class does not extend Playwright's Page class\");\n    }\n    if (!content.includes(\"constructor\")) {\n      warnings.push(\"Class is missing a constructor\");\n    }\n    if (!content.includes(\"super(\")) {\n      warnings.push(\"Constructor does not call super()\");\n    }\n\n    // Code quality checks\n    if (content.includes(\"```\")) {\n      warnings.push(\"Code contains markdown artifacts\");\n    }\n    if (content.includes(\"TODO\")) {\n      warnings.push(\"Code contains TODO comments\");\n    }\n    if (content.includes(\"any\")) {\n      warnings.push(\"Code contains 'any' type - consider using specific types\");\n    }\n\n    // Playwright patterns\n    if (!content.includes(\"async\")) {\n      warnings.push(\"No async methods found - POM should contain page interactions\");\n    }\n    if (!content.includes(\"await\")) {\n      warnings.push(\"No await keywords found - POM should contain async operations\");\n    }\n    \n    // Selector patterns\n    const selectorPatterns = [\n      \"getByRole\",\n      \"getByLabel\",\n      \"getByPlaceholder\",\n      \"getByTestId\",\n      \"locator\"\n    ];\n    if (!selectorPatterns.some(pattern => content.includes(pattern))) {\n      warnings.push(\"No recommended Playwright selectors found\");\n    }\n\n    // Method patterns\n    if (!content.includes(\"return\")) {\n      warnings.push(\"No return statements found - methods should return values or promises\");\n    }\n    if (!content.includes(\"try\")) {\n      warnings.push(\"No error handling found - consider adding try/catch blocks\");\n    }\n    if (content.includes(\"Thread.sleep\") || content.includes(\"setTimeout\")) {\n      warnings.push(\"Avoid using explicit sleeps - use Playwright's built-in waiting mechanisms\");\n    }\n\n    // Documentation\n    if (!content.includes(\"@param\") && !content.includes(\"@returns\")) {\n      warnings.push(\"Missing JSDoc documentation for methods\");\n    }\n\n    return warnings;\n  }\n\n  private async writePOMFiles(poms: GeneratedPOM[]): Promise<GeneratedPOM[]> {\n    try {\n      const outputDir = this.options.outputDir || DEFAULTS.outputDir;\n      // Ensure output directory exists\n      await fs.promises.mkdir(outputDir, { recursive: true });\n\n      for (const pom of poms) {\n        // Validate file path\n        const normalizedPath = path.normalize(pom.filePath);\n        if (!normalizedPath.startsWith(outputDir)) {\n          throw new POMGenerationError(`Invalid file path: ${pom.filePath}`);\n        }\n\n        const fileContent = this.generateFileContent(pom);\n        await fs.promises.writeFile(pom.filePath, fileContent, \"utf8\");\n        \n        if (pom.warnings && pom.warnings.length > 0) {\n          console.log(`⚠️ Warnings for ${pom.className}:`);\n          pom.warnings.forEach(warning => console.log(`   - ${warning}`));\n        }\n        \n        console.log(`📄 Generated POM: ${path.relative(process.cwd(), pom.filePath)}`);\n      }\n\n      return poms;\n    } catch (error) {\n      throw new POMGenerationError(\n        \"Failed to write POM files\",\n        error instanceof Error ? error.message : String(error)\n      );\n    }\n  }\n\n  /**\n   * Generates the final file content with imports and metadata\n   * @param pom The POM details\n   * @returns Formatted file content\n   */\n  private generateFileContent(pom: GeneratedPOM): string {\n    const timestamp = new Date().toISOString();\n    return [\n      '// @ts-check',\n      `// Generated by POMGenerator on ${timestamp}`,\n      `// Class: ${pom.className}`,\n      '',\n      '/* eslint-disable max-len */',\n      'import { expect, type Page } from \"@playwright/test\";',\n      '',\n      '/**',\n      ' * Page Object Model for handling page interactions',\n      ` * @class ${pom.className}`,\n      ' * @extends {Page}',\n      ' */',\n      '',\n      pom.content.trim(),\n      ''\n    ].join('\\n');\n  }\n}\n"]}
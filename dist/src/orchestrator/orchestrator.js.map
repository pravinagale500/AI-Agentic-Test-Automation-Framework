{"version":3,"file":"orchestrator.js","sourceRoot":"","sources":["../../../src/orchestrator/orchestrator.ts"],"names":[],"mappings":"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","sourcesContent":["import { CONFIG } from \"../config.js\";\nimport { runWithRetries } from \"../utils/rerunHandler.js\";\nimport fs from \"fs\";\nimport { createLogger, format, transports } from \"winston\";\n\n/**\n * Custom error for orchestration failures\n */\nexport class OrchestrationError extends Error {\n  constructor(message: string, public readonly details?: unknown) {\n    super(message);\n    this.name = \"OrchestrationError\";\n  }\n}\n\n/**\n * Test prompt definition\n */\ninterface TestPrompt {\n  /** Unique identifier for the test */\n  tag: string;\n  /** Human-readable test description */\n  description: string;\n  /** The test generation prompt */\n  prompt: string;\n}\n\n/**\n * Test run statistics\n */\ninterface RunStats {\n  /** Total number of scenarios */\n  total: number;\n  /** Number of passed scenarios */\n  passed: number;\n  /** Array of failed scenario tags */\n  failed: string[];\n  /** Start time of the run */\n  startTime: Date;\n  /** End time of the run */\n  endTime?: Date;\n  /** Duration in milliseconds */\n  duration?: number;\n}\n\n/**\n * Orchestrator configuration\n */\ninterface OrchestratorConfig {\n  /** Maximum concurrent test runs */\n  concurrency?: number;\n  /** Timeout for each scenario in ms */\n  scenarioTimeout?: number;\n  /** Number of retry attempts */\n  retryAttempts?: number;\n  /** Whether to continue on failure */\n  continueOnFailure?: boolean;\n  /** Whether to enable verbose logging */\n  verbose?: boolean;\n}\n\n// Configure logger\nconst logger = createLogger({\n  level: process.env[\"LOG_LEVEL\"] || \"info\",\n  format: format.combine(\n    format.timestamp(),\n    format.colorize(),\n    format.printf(({ timestamp, level, message }) => {\n      return `${timestamp} [${level}]: ${message}`;\n    })\n  ),\n  transports: [\n    new transports.Console(),\n    new transports.File({ filename: \"error.log\", level: \"error\" }),\n    new transports.File({ filename: \"orchestrator.log\" })\n  ]\n});\n\n// Load prompts\nconst promptsPath = new URL(\"../../prompts/regressionPrompts.json\", import.meta.url);\nconst prompts: TestPrompt[] = JSON.parse(fs.readFileSync(promptsPath, \"utf-8\"));\n\n// Default configuration\nconst DEFAULT_CONFIG: Required<OrchestratorConfig> = {\n  concurrency: 1,\n  scenarioTimeout: 5 * 60 * 1000, // 5 minutes\n  retryAttempts: 2,\n  continueOnFailure: true,\n  verbose: false\n};\n\n/**\n * Process and validate command line arguments\n * @throws {OrchestrationError} If environment is invalid\n */\nfunction parseArgs(): { tagToRun: string | undefined; env: string } {\n  const tagToRun = process.argv[2];\n  const envArg = process.argv[3]?.toLowerCase();\n\n  if (envArg && ![\"qa\", \"uat\", \"prod\"].includes(envArg)) {\n    throw new OrchestrationError(\n      `Invalid environment: ${envArg}`,\n      `Must be one of: qa, uat, prod`\n    );\n  }\n\n  if (envArg) {\n    process.env[\"ENV\"] = envArg;\n  }\n\n  return { tagToRun, env: process.env[\"ENV\"] || \"qa\" };\n}\n\n/**\n * Replace configuration placeholders in template string\n * @throws {OrchestrationError} If configuration key is unknown\n */\nfunction interpolateConfigPlaceholders(template: string): string {\n  return template.replace(/\\$\\{CONFIG\\.([A-Z0-9_]+)\\}/g, (_, key) => {\n    if (!(key in CONFIG)) {\n      throw new OrchestrationError(\n        `Unknown configuration key: ${key}`,\n        `Available keys: ${Object.keys(CONFIG).join(\", \")}`\n      );\n    }\n    return CONFIG[key as keyof typeof CONFIG] || \"\";\n  });\n}\n\n/**\n * Run a single test scenario\n * @param prompt The test prompt to run\n * @param config Orchestrator configuration\n * @param signal Optional abort signal\n */\nasync function runScenario(\n  prompt: TestPrompt,\n  config: Required<OrchestratorConfig>,\n  signal?: AbortSignal\n): Promise<boolean> {\n  const startTime = Date.now();\n  logger.info(`Running scenario: ${prompt.tag} - ${prompt.description}`);\n\n  try {\n    if (signal?.aborted) {\n      throw new OrchestrationError(\"Scenario aborted by user\");\n    }\n\n    // Validate prompt\n    if (!prompt.prompt.trim()) {\n      throw new OrchestrationError(\"Empty prompt\");\n    }\n\n    const expandedPrompt = interpolateConfigPlaceholders(prompt.prompt);\n    const timeoutPromise = new Promise((_, reject) => {\n      setTimeout(() => {\n        reject(new OrchestrationError(`Scenario timed out after ${config.scenarioTimeout}ms`));\n      }, config.scenarioTimeout);\n    });\n\n    await Promise.race([\n      runWithRetries(expandedPrompt, prompt.tag, config.retryAttempts),\n      timeoutPromise\n    ]);\n\n    const duration = Date.now() - startTime;\n    logger.info(`Scenario ${prompt.tag} passed in ${duration}ms`);\n    return true;\n  } catch (error) {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    logger.error(`Scenario ${prompt.tag} failed: ${errorMessage}`);\n    return false;\n  }\n}\n\n/**\n * Main orchestration function\n * @param config Optional configuration overrides\n */\nasync function main(config: OrchestratorConfig = {}) {\n  const startTime = new Date();\n  const effectiveConfig = { ...DEFAULT_CONFIG, ...config };\n  const controller = new AbortController();\n\n  try {\n    const { tagToRun, env } = parseArgs();\n    logger.info(`Starting test run in ${env} environment`);\n\n    const scenariosToRun = tagToRun \n      ? prompts.filter(p => p.tag === tagToRun)\n      : prompts;\n\n    if (scenariosToRun.length === 0) {\n      logger.warn(`No scenarios found${tagToRun ? ` for tag: ${tagToRun}` : \"\"}`);\n      return;\n    }\n\n    const stats: RunStats = {\n      total: scenariosToRun.length,\n      passed: 0,\n      failed: [],\n      startTime,\n    };\n\n    // Set up signal handlers\n    process.once('SIGINT', () => {\n      logger.warn('Received SIGINT. Gracefully shutting down...');\n      controller.abort();\n    });\n\n    process.once('SIGTERM', () => {\n      logger.warn('Received SIGTERM. Gracefully shutting down...');\n      controller.abort();\n    });\n\n    // Run scenarios with concurrency control\n    const chunks = [];\n    for (let i = 0; i < scenariosToRun.length; i += effectiveConfig.concurrency) {\n      chunks.push(scenariosToRun.slice(i, i + effectiveConfig.concurrency));\n    }\n\n    for (const chunk of chunks) {\n      const chunkPromises = chunk.map(async (scenario) => {\n        const result = await runScenario(scenario, effectiveConfig, controller.signal);\n        return { scenario, passed: result };\n      });\n\n      const chunkResults = await Promise.all(chunkPromises);\n\n      for (const { scenario, passed } of chunkResults) {\n        if (passed) {\n          stats.passed++;\n        } else {\n          stats.failed.push(scenario.tag);\n          if (!effectiveConfig.continueOnFailure) {\n            throw new OrchestrationError(\n              \"Test run aborted due to failure\",\n              `Failed scenario: ${scenario.tag}`\n            );\n          }\n        }\n      }\n    }\n\n    // Calculate final statistics\n    stats.endTime = new Date();\n    stats.duration = stats.endTime.getTime() - stats.startTime.getTime();\n\n    // Log summary\n    logger.info(\"\\n📊 Test Run Summary\");\n    logger.info(`Duration: ${stats.duration / 1000}s`);\n    logger.info(`Total: ${stats.total}`);\n    logger.info(`Passed: ${stats.passed}`);\n    logger.info(`Failed: ${stats.failed.length}`);\n    \n    if (stats.failed.length > 0) {\n      logger.error(\"Failed scenarios:\", stats.failed.join(\", \"));\n      process.exit(1);\n    }\n\n    logger.info(\"✅ Test run completed successfully\");\n  } catch (error) {\n    if (error instanceof OrchestrationError) {\n      logger.error(`Orchestration error: ${error.message}`);\n      if (error.details) {\n        logger.error(`Details: ${error.details}`);\n      }\n    } else {\n      logger.error(\"Unexpected error:\", error);\n    }\n    process.exit(1);\n  }\n}\n\n// Handle uncaught errors\nprocess.on(\"unhandledRejection\", (error) => {\n  logger.error(\"❌ Unhandled rejection:\", error);\n  process.exit(1);\n});\n\nprocess.on(\"uncaughtException\", (error) => {\n  logger.error(\"❌ Uncaught exception:\", error);\n  process.exit(1);\n});\n\n// Run the orchestrator with default configuration\nif (import.meta.url === `file://${process.argv[1]}`) {\n  main({\n    concurrency: Number(process.env[\"CONCURRENCY\"]) || DEFAULT_CONFIG.concurrency,\n    scenarioTimeout: Number(process.env[\"SCENARIO_TIMEOUT\"]) || DEFAULT_CONFIG.scenarioTimeout,\n    retryAttempts: Number(process.env[\"RETRY_ATTEMPTS\"]) || DEFAULT_CONFIG.retryAttempts,\n    continueOnFailure: process.env[\"CONTINUE_ON_FAILURE\"] !== \"false\",\n    verbose: process.env[\"VERBOSE\"] === \"true\"\n  }).catch((error) => {\n    logger.error(\"❌ Fatal error:\", error);\n    process.exit(1);\n  });\n}\n"]}
{"version":3,"file":"config.js","sourceRoot":"","sources":["../../src/config.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,QAAQ,CAAC;AAE5B,4CAA4C;AAC5C,MAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,4BAA4B;AAC5B,MAAM,iBAAiB,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,CAAU,CAAC;AAGxD,+BAA+B;AAC/B,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,WAAW,EAAE,CAAC;AACvD,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,GAAkB,CAAC,EAAE,CAAC;IACpD,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,qBAAqB,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AAClG,CAAC;AAEF,+DAA+D;AAC/D,SAAS,cAAc,CAAC,IAAY,EAAE,WAAmB;IACvD,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,IAAI,IAAI,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IAClE,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,IAAI,KAAK,CAAC,0CAA0C,IAAI,IAAI,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;IACjG,CAAC;IACD,OAAO,KAAK,CAAC;AACf,CAAC;AAED,qBAAqB;AACrB,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC;AACrD,IAAI,CAAC,cAAc,EAAE,CAAC;IACpB,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;AACrE,CAAC;AAED,6BAA6B;AAC7B,MAAM,CAAC,MAAM,MAAM,GAAG;IACpB,GAAG,EAAE,GAAkB;IACvB,QAAQ,EAAE,cAAc,CAAC,UAAU,EAAE,GAAG,CAAC;IACzC,QAAQ,EAAE,cAAc,CAAC,UAAU,EAAE,GAAG,CAAC;IACzC,QAAQ,EAAE,cAAc,CAAC,UAAU,EAAE,GAAG,CAAC;IACzC,cAAc;CACN,CAAC","sourcesContent":["import dotenv from \"dotenv\";\n\n// Load environment variables from .env file\ndotenv.config();\n\n// Define valid environments\nconst validEnvironments = [\"qa\", \"uat\", \"prod\"] as const;\ntype Environment = typeof validEnvironments[number];\n\n // Get and validate environment\n const env = (process.env['ENV'] || \"qa\").toLowerCase();\n if (!validEnvironments.includes(env as Environment)) {\n   throw new Error(`Invalid environment: ${env}. Must be one of: ${validEnvironments.join(\", \")}`);\n }\n\n// Helper function to get environment variables with validation\nfunction getEnvVariable(name: string, environment: string): string {\n  const value = process.env[`${name}_${environment.toUpperCase()}`];\n  if (!value) {\n    throw new Error(`Missing required environment variable: ${name}_${environment.toUpperCase()}`);\n  }\n  return value;\n}\n\n// Get OpenAI API key\nconst OPENAI_API_KEY = process.env[\"OPENAI_API_KEY\"];\nif (!OPENAI_API_KEY) {\n  throw new Error(\"OPENAI_API_KEY environment variable is required\");\n}\n\n// Export typed configuration\nexport const CONFIG = {\n  ENV: env as Environment,\n  BASE_URL: getEnvVariable(\"BASE_URL\", env),\n  USERNAME: getEnvVariable(\"USERNAME\", env),\n  PASSWORD: getEnvVariable(\"PASSWORD\", env),\n  OPENAI_API_KEY\n} as const;\n"]}